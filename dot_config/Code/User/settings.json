{
  // # General settings

  // Only breadcrumbs, but only files, not local symbols.
  "breadcrumbs.enabled": true,
  "breadcrumbs.filePath": "on",
  "breadcrumbs.symbolPath": "off",
  "diffEditor.ignoreTrimWhitespace": false,
  "diffEditor.renderSideBySide": true,
  "editor.accessibilitySupport": "off",
  "editor.cursorStyle": "line",
  "editor.find.seedSearchStringFromSelection": "selection",
  "editor.formatOnSave": false,
  // Because of the above, don't do anything on save.
  "editor.formatOnType": false,
  "editor.inlineSuggest.enabled": true,
  "editor.insertSpaces": false,
  "editor.lineNumbers": "on",
  // Auto-updating tags doesn't play well with vim.
  "editor.linkedEditing": false,
  "editor.minimap.enabled": false,
  "editor.stickyScroll.enabled": true,
  "editor.suggestSelection": "first",
  "editor.unicodeHighlight.ambiguousCharacters": false,
  "editor.wordSeparators": "/\\()\"':,.;<>~!@#$%^&*|+=[]{}`?-",
  "editor.wordWrap": "on",
  "editor.wrappingIndent": "same",
  // Number of editors shown in the Open Editors pane. Set it to a small number becuase I don't use it.
  "explorer.openEditors.visible": 1,
  "explorer.autoReveal": false,
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,
  // Save on focus change to prevent forgetting to save.
  "files.autoSave": "onFocusChange",
  // Configure glob patterns for excluding files and folders.
  "files.exclude": {
    "**/.DS_Store": true,
    "**/.git": true,
    "**/.hg": true,
    "**/.svn": true,
    "**/CVS": true,
    "**/webpack-bundle.js": true
  },
  "git.autofetch": true,
  "github.copilot.enable": {
    "*": true,
    "plaintext": true,
    "markdown": false,
    "scminput": false,
    "yaml": false
  },
  "search.exclude": {
    "**/node_modules": true,
    "**/bower_components": true
  },
  "search.mode": "view",
  // Windows
  // Allows ctrl+b to work in the terminal.
  "terminal.integrated.commandsToSkipShell": [
    "workbench.action.toggleSidebarVisibility"
  ],
  "terminal.integrated.copyOnSelection": true,
  "terminal.integrated.enableMultiLinePasteWarning": false,
  "workbench.editor.labelFormat": "medium",
  // Go to the json editor by default.
  "workbench.settings.editor": "json",
  "workbench.colorTheme": "Dracula",

  // ## OS-Specific

  // Lets remapped esc key work on ubuntu.
  "keyboard.dispatch": "keyCode",
  "terminal.integrated.shell.windows": "C:\\Windows\\System32\\cmd.exe",
  "terminal.integrated.defaultProfile.windows": "Git Bash",

  // ## Default file formatting
  "editor.tabSize": 2,
  "editor.detectIndentation": false,
  "files.eol": "\n",

  // ## Fonts
  "editor.fontFamily": "'Fira Code', hack",
  "editor.fontLigatures": true,
  "terminal.integrated.fontFamily": "'MesloLGS NF', 'Fira Code', hack",

  // ## No tabs
  "workbench.editor.showTabs": "single",
  // Turn this off since I don't use tabs.
  "workbench.editor.enablePreview": false,

  // # Max terminal
  // Hide the sidebar icons when closed
  "workbench.activityBar.location": "top",
  // Terminal should always open maximized
  "workbench.panel.opensMaximized": "always",

  // # Neovim
  "vscode-neovim.neovimInitVimPaths.darwin": "~/.config/vscode-neovim/init.lua",
  "vscode-neovim.neovimInitVimPaths.linux": "~/.config/vscode-neovim/init.lua",
  "vscode-neovim.useWSL": true,
  "extensions.experimental.affinity": {
    "asvetliakov.vscode-neovim": 1
  },
  "settings.cycle": [
    {
      "id": "inlayHints",
      "overrideWorkspaceSettings": false,
      "values": [
        {
          "typescript.inlayHints.functionLikeReturnTypes.enabled": false,
          "typescript.inlayHints.parameterNames.enabled": "none",
          "typescript.inlayHints.parameterTypes.enabled": false,
          "javascript.inlayHints.parameterNames.enabled": "none",
          "javascript.inlayHints.functionLikeReturnTypes.enabled": false,
          "javascript.inlayHints.enumMemberValues.enabled": false,
          "javascript.inlayHints.parameterTypes.enabled": false,
          "go.inlayHints.compositeLiteralFields": false,
          "go.inlayHints.constantValues": false,
          "go.inlayHints.parameterNames": false
        },
        {
          "typescript.inlayHints.functionLikeReturnTypes.enabled": true,
          "typescript.inlayHints.parameterNames.enabled": "all",
          "typescript.inlayHints.parameterTypes.enabled": true,
          "javascript.inlayHints.parameterNames.enabled": "all",
          "javascript.inlayHints.functionLikeReturnTypes.enabled": true,
          "javascript.inlayHints.enumMemberValues.enabled": true,
          "javascript.inlayHints.parameterTypes.enabled": true,
          "go.inlayHints.compositeLiteralFields": true,
          "go.inlayHints.constantValues": true,
          "go.inlayHints.parameterNames": true
        }
      ]
    }
  ],
  // # Vim
  "vim.useSystemClipboard": true,
  "vim.leader": "<space>",
  "vim.enableNeovim": false,
  "vim.easymotion": true,
  "vim.visualstar": true,
  "vim.sneak": false,
  "vim.sneakUseIgnorecaseAndSmartcase": true,
  "vim.useCtrlKeys": true,
  "vim.handleKeys": {
    "<C-f>": false,
    "<C-b>": false,
    "<C-d>": true,
    "<C-p>": false,
    "<C-j>": false,
    "<C-t>": false
  },
  "vim.vimrc.enable": false,
  "vim.normalModeKeyBindingsNonRecursive": [
    // vim-vinegar
    {
      "before": ["-"],
      "commands": [
        "workbench.action.focusSideBar",
        "workbench.files.action.showActiveFileInExplorer"
      ]
    },
    {
      "before": ["<leader>", "k"],
      "after": [],
      "commands": ["editor.action.formatDocument"]
    },
    {
      "before": ["<leader>", "="],
      "after": [],
      "commands": ["editor.action.formatDocument"]
    },
    {
      // Close to <leader><space> for formatting CSV
      "before": ["<leader>", "+"],
      "after": [],
      "commands": ["rainbow-csv.Align"]
    },
    {
      "before": ["<leader>", "/"],
      "after": [],
      "commands": ["workbench.view.search"]
    },
    {
      "before": ["<leader>", "*"],
      "after": [],
      "commands": [
        {
          "command": "workbench.view.search"
        }
      ]
    },
    // Close split
    {
      "before": ["<C-w>", "c"],
      "after": [],
      "commands": [
        {
          "command": "workbench.action.closeEditorsInGroup"
        }
      ]
    },
    {
      "before": ["<leader>", ":"],
      "after": [],
      "commands": [
        {
          "command": "workbench.action.showCommands"
        }
      ]
    },
    {
      "before": ["<leader>", "f", "e", "d"],
      "after": ["enter"],
      "commands": [
        {
          "command": "workbench.action.openGlobalSettings"
        }
      ]
    },
    {
      "before": ["<leader>", "m", "t", "b"],
      "commands": [
        {
          "command": "extension.runFileSpecs"
        }
      ]
    },
    {
      "before": ["<leader>", "m", "t", "t"],
      "commands": [
        {
          "command": "extension.runSpecLine"
        }
      ]
    },
    {
      "before": ["<leader>", "m", "t", "l"],
      "commands": [
        {
          "command": "extension.runLastSpec"
        }
      ]
    },
    {
      "before": ["<leader>", "p", "a"],
      "commands": [
        {
          "command": "alternate.alternateFile"
        }
      ]
    },
    {
      "before": ["<leader>", "p", "s"],
      "commands": [
        {
          "command": "alternate.alternateFileInSplit"
        }
      ]
    },
    {
      "before": ["<leader>", "c", "a"],
      "commands": ["editor.action.quickFix"]
    },
    {
      "before": ["z", "g"],
      "commands": ["cSpell.addWordToUserDictionary"]
    },
    {
      "before": ["z", "w"],
      "commands": ["cSpell.removeWordFromUserDictionary"]
    },
    {
      "before": ["j"],
      "after": ["g", "j"]
    },
    {
      "before": ["k"],
      "after": ["g", "k"]
    },
    // snake_case
    {
      "before": ["c", "r", "s"],
      "commands": [
        {
          "command": "editor.action.transformToSnakecase"
        }
      ]
    },
    // camelCase
    {
      "before": ["c", "r", "c"],
      "commands": [
        {
          "command": "editor.action.transformToCamelcase"
        }
      ]
    },
    // kebab-case
    {
      "before": ["c", "r", "-"],
      "commands": [
        {
          "command": "editor.action.transformToKebabcase"
        }
      ]
    },
    // PascalCase ("MixedCase")
    {
      "before": ["c", "r", "m"],
      "commands": [
        {
          "command": "editor.action.transformToTitlecase"
        },
        {
          "command": "editor.action.transformToCamelcase"
        }
      ]
    },
    // UPPER_CASE
    {
      "before": ["c", "r", "u"],
      "commands": [
        {
          "command": "editor.action.transformToSnakecase"
        },
        {
          "command": "editor.action.transformToUppercase"
        }
      ]
    },
    {
      "before": ["<space>", "g", "g"],
      "commands": ["workbench.view.scm"]
    },
    // TS Go to source definition (vs. gd for goToDefintion)
    {
      "before": ["t", "d"],
      "commands": ["typescript.goToSourceDefinition"]
    },
    // Test runner
    {
      "before": ["<leader>", "t", "r"],
      "commands": ["testing.runAtCursor"]
    },
    {
      "before": ["<leader>", "t", "t"],
      "commands": ["testing.runCurrentFile"]
    },
    // Next/prev git change
    {
      "before": ["[", "c"],
      "commands": ["workbench.action.editor.previousChange"]
    },
    {
      "before": ["]", "c"],
      "commands": ["workbench.action.editor.nextChange"]
    },
    // Next/prev error
    {
      "before": ["[", "s"],
      "commands": ["editor.action.marker.prev"]
    },
    {
      "before": ["]", "s"],
      "commands": ["editor.action.marker.next"]
    }
  ],

  // # Language-specific settings

  "files.associations": {
    "atlas.hcl": "atlas-config"
  },

  // ## JS
  "javascript.updateImportsOnFileMove.enabled": "always",
  "typescript.updateImportsOnFileMove.enabled": "always",
  // Don't use aliases in renames of punned fields.
  "typescript.preferences.useAliasesForRenames": false,
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],
  "typescript.inlayHints.functionLikeReturnTypes.enabled": false,
  "typescript.inlayHints.parameterNames.enabled": "none",
  "typescript.inlayHints.parameterTypes.enabled": false,
  "javascript.inlayHints.parameterNames.enabled": "none",
  "javascript.inlayHints.functionLikeReturnTypes.enabled": false,
  "javascript.inlayHints.enumMemberValues.enabled": false,
  "javascript.inlayHints.parameterTypes.enabled": false,

  // ## Go

  "go.toolsManagement.autoUpdate": true,
  "gopls": {
    "ui.semanticTokens": true
  },
  "go.inlayHints.compositeLiteralFields": false,
  "go.inlayHints.constantValues": false,
  "go.inlayHints.parameterNames": false,

  // ## CSS

  "css.lint.unknownAtRules": "ignore",

  // ## HTML
  "htmlhint.options": {
    "doctype-first": false
  },
  "html.format.unformatted": "a-entity",
  "html.format.templating": true,

  // ## Markdown
  "markdownlint.config": {
    "default": true,
    "MD003": {
      "style": "consistent"
    },
    "MD025": false,
    "MD033": false,
    "MD007": {
      "indent": 2
    },
    "no-hard-tabs": true
  },

  // ## PostgreSQL
  "pgFormatter.commaBreak": true,
  "pgFormatter.spaces": 4,
  "pgFormatter.placeholder": "-- pgfmt: off(?:.*)?-- pgfmt: on",

  // ## Python
  "jupyter.askForKernelRestart": false,
  "jupyter.interactiveWindow.textEditor.executeSelection": false,
  "python.dataScience.sendSelectionToInteractiveWindow": false,
  "python.jediEnabled": false,
  "python.languageServer": "Pylance",
  "python.terminal.activateEnvironment": false,
  "notebook.cellToolbarLocation": {
    "default": "right",
    "jupyter-notebook": "left"
  },

  // ## OCaml
  "ocaml.lintOnSave": true,
  "ocaml.merlinPath": "ocamlmerlin",

  // ## Ruby
  "ruby.lint": {
    "rubocop": false
  },
  "ruby.format": false,
  "ruby.specCommand": "spring rspec",

  // ## Blockchain

  "solidity.telemetry": false,

  // ## C
  "cmake.configureOnOpen": true,
  "omnisharp.useModernNet": false,

  // ## Formatters
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[scss]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[solidity]": {
    "editor.defaultFormatter": "NomicFoundation.hardhat-solidity"
  },
  "[yaml]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[css]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[csharp]": {
    "editor.defaultFormatter": "csharpier.csharpier-vscode"
  },
  "[python]": {
    "editor.defaultFormatter": "ms-python.black-formatter"
  },
  "[proto3]": {
    "editor.defaultFormatter": "bufbuild.vscode-buf"
  },

  "[markdown]": {
    // CSV goes all the way across for single lines.
    "editor.wordWrap": "off"
  },
  "[csv]": {
    // CSV goes all the way across for single lines.
    "editor.wordWrap": "off"
  },

  // # Tests

  "jest.autoRun": "off",
  "jest.autoRevealOutput": "off",
  "testing.openTesting": "neverOpen",

  // # Other extensions

  "githubPullRequests.pullBranch": "never",
  "githubPullRequests.pushBranch": "always",
  "githubPullRequests.terminalLinksHandler": "github",
  "hardhat.telemetry": true,
  "liveServer.settings.donotShowInfoMsg": true,
  "liveServer.settings.donotVerifyTags": true,
  "redhat.telemetry.enabled": false,
  "remote.SSH.remotePlatform": { "doof.local": "linux" },
  "scm.diffDecorationsIgnoreTrimWhitespace": "inherit",
  "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
  "wordcounter.languages": ["markdown", "mdx"],

  // # Spelling
  "cSpell.enableFiletypes": ["go"],
  "cSpell.enabledLanguageIds": [
    "lua",
    "elixir",
    "erb",
    "go",
    "golang",
    "javascript",
    "javascriptreact",
    "json",
    "markdown",
    "mdx",
    "plaintext",
    "proto3",
    "ruby",
    "solidity",
    "text",
    "typescript",
    "typescriptreact",
    "yml"
  ],
  "cSpell.userWords": [
    "abicoder",
    "AFRAME",
    "ainsoph",
    "Airtable",
    "Alderaan",
    "architecting",
    "autosave",
    "behaviour",
    "Behaviour",
    "bignumber",
    "bookmarkers",
    "cachex",
    "camelize",
    "caml",
    "casp",
    "chakra",
    "changeset",
    "clsx",
    "comparator",
    "concat",
    "cond",
    "Confero",
    "consts",
    "coord",
    "Cryptographically",
    "cubemap",
    "datetime",
    "defdelegate",
    "defimpl",
    "defmodule",
    "defp",
    "defstruct",
    "deno",
    "dissoc",
    "doosan",
    "downcase",
    "dragula",
    "drei",
    "droplist",
    "ecto",
    "entrypoint",
    "equirectangular",
    "erlang",
    "Ethereum",
    "Ethereumex",
    "ethersproject",
    "filestack",
    "financings",
    "firestore",
    "frontmatter",
    "futura",
    "Gcode",
    "gcodesandbox",
    "geofence",
    "Geofenced",
    "geohash",
    "geolocate",
    "geolocated",
    "gltf",
    "healthcheck",
    "hermle",
    "hotjar",
    "idempotency",
    "IERC",
    "immersivemess",
    "injectable",
    "juypter",
    "Juypter",
    "kablammo",
    "kalman",
    "Kalman",
    "keccak",
    "larkdown",
    "leaderboard",
    "litepaper",
    "mainphase",
    "mapbox",
    "moduledoc",
    "nomiclabs",
    "occluder",
    "occluders",
    "Ockelmann",
    "onboarding",
    "openapi",
    "orderbook",
    "Orderbook",
    "overlayed",
    "params",
    "parser's",
    "pausable",
    "performant",
    "permissioned",
    "pioeces",
    "poap",
    "poppable",
    "Postgres",
    "ppfs",
    "preload",
    "preprocess",
    "preprocessors",
    "promisify",
    "proveout",
    "proxied",
    "Raycaster",
    "Redex",
    "reentrancy",
    "refetch",
    "repo",
    "repos",
    "Rerem",
    "resizer",
    "Roadmap",
    "rootname",
    "ropsten",
    "Scaredy",
    "Securitize",
    "serializer",
    "sharespost",
    "signup",
    "slackbot",
    "slugified",
    "snapshotting",
    "SPDX",
    "stateful",
    "struct",
    "structs",
    "tablature",
    "tanstack",
    "termsheet",
    "tezos",
    "themself",
    "timestamps",
    "tock",
    "todos",
    "tokenizes",
    "transcoder",
    "transcoding",
    "truthy",
    "uneditable",
    "unmarshaled",
    "unmarshaler",
    "unmarshalers",
    "unmarshaling",
    "unmarshals",
    "unmount",
    "unnest",
    "unpause",
    "unpauses",
    "upsert",
    "validators",
    "voxel",
    "walkthrough",
    "webar",
    "webauthn",
    "zappar",
    "zustand"
  ],
  "window.zoomLevel": 1
}
